---
openapi: 3.0.0
info:
  title: Riverslate API
  version: 1.0.0
servers:
  - url: https://virtserver.swaggerhub.com/NBITZER/RiverslateAPI/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://api.riverslate.co
    description: Riverslate API Server
security:
  - bearerAuth: []
paths:
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get a single user by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: Unique identifier of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      tags:
        - Users
      summary: Update an existing user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: Unique identifier of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: Successfully updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "404":
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: Unique identifier of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successfully deleted user
        "404":
          description: User not found
  /users:
    get:
      tags:
        - Users
      summary: List all users
      operationId: listUsers
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
  /users/{user}/address/{id}:
    get:
      tags:
        - Address
      summary: Get a user's address by ID
      operationId: getUserAddress
      parameters:
        - name: user
          in: path
          description: Unique identifier of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Unique identifier of the address
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Address retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "404":
          description: Address not found
    post:
      tags:
        - Address
      summary: Create a new address for a user
      operationId: createUserAddress
      parameters:
        - name: user
          in: path
          description: Unique identifier of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Unique identifier of the address to be created
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
        required: true
      responses:
        "201":
          description: Address created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          description: Invalid input
    delete:
      tags:
        - Address
      summary: Delete a user's address by ID
      operationId: deleteUserAddress
      parameters:
        - name: user
          in: path
          description: Unique identifier of the user
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: id
          in: path
          description: Unique identifier of the address to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Address deleted successfully
        "404":
          description: Address not found
  /plans/{id}:
    get:
      summary: Get Specific Plan
      description: Retrieve detailed information about a plan with the specified ID.
      operationId: getSpecificPlan
      parameters:
        - name: id
          in: path
          description: Unique identifier of the plan to retrieve.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved the plan details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "404":
          description: Plan with the specified ID was not found.
  /plans:
    get:
      summary: List All Plans
      description: Retrieve a list of all plans available.
      operationId: listAllPlans
      responses:
        "200":
          description: A list of plans was successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plan"
  /contracts/{id}:
    get:
      summary: Get Contract
      description: Retrieve detailed information about a specific contract.
      operationId: getContract
      parameters:
        - name: id
          in: path
          description: Unique identifier of the contract.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully retrieved the contract details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "404":
          description: Contract not found.
  /contracts/{id}/cancel:
    post:
      summary: Cancel Active Contract
      description: Cancels an active contract.
      operationId: cancelContract
      parameters:
        - name: id
          in: path
          description: Unique identifier of the contract to cancel.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Contract cancelled successfully.
        "404":
          description: Contract not found or not in an active state.
  /contracts:
    get:
      summary: List All Contracts
      description: Retrieve a list of all contracts.
      operationId: listAllContracts
      responses:
        "200":
          description: A list of contracts was successfully retrieved.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Contract"
    post:
      summary: Create Contract
      description: Create a new contract with the given details.
      operationId: createContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Contract"
        required: true
      responses:
        "201":
          description: Contract created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contract"
        "400":
          description: Invalid input provided.
  /prices:
    get:
      tags:
        - Prices
      summary: Get day-ahead prices
      operationId: getDayAheadPrices
      parameters:
        - name: startDate
          in: query
          description: The start date and time for the price retrieval.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: The end date and time for the price retrieval.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: date-time
        - name: interval
          in: query
          description: The interval for which the prices are requested.
          required: true
          style: form
          explode: true
          schema:
            type: string
            enum:
              - HOURLY
              - QUARTERHOURLY
        - name: marketType
          in: query
          description: The market type for which the prices are requested.
          required: true
          style: form
          explode: true
          schema:
            type: string
            enum:
              - DayAheadEPEX
      responses:
        "200":
          description: "An array of prices for the specified period, interval, and market type."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
              example:
                interval: HOURLY
                marketType: DayAheadEPEX
                prices:
                  - start: 2023-01-01T00:00:00Z
                    end: 2023-01-01T01:59:59Z
                    price: 30.64
                  - start: 2023-01-01T01:00:00Z
                    end: 2023-01-02T02:59:59Z
                    price: 32.31
                  - start: 2023-01-01T02:00:00Z
                    end: 2023-01-02T03:59:59Z
                    price: 28.15
        "400":
          description: Bad request if the query parameters are not provided or invalid.
        "404":
          description: Not found if no prices are found for the provided parameters.
        "500":
          description: Internal server error.
components:
  schemas:
    User:
      required:
        - birthdate
        - createdAt
        - email
        - fullName
        - id
        - phone
        - preferredLocale
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier of the user, generated by the database."
          format: uuid
          readOnly: true
          example: cb47d5e5-4060-4747-9859-e9e5c985ab67
        fullName:
          type: string
          description: The full name of the user.
          example: John Doe
        birthdate:
          type: string
          description: The birthdate of the user.
          format: date
          example: 1990-01-01
        email:
          uniqueItems: true
          type: string
          description: The email address of the user.
          format: email
          example: user@example.com
        phone:
          type: string
          description: The users phone number
          format: phone
          example: +49 157 87755123
        preferredLocale:
          type: string
          description: The preferred locale of the user.
          example: de-de
        createdAt:
          type: string
          description: The timestamp when the user account was created.
          format: date-time
          example: 2024-01-01T21:02:14Z
    Address:
      required:
        - city
        - country
        - id
        - line1
        - postalCode
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier of the address, generated by the database."
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        line1:
          type: string
          description: "Address line 1 (e.g., street, PO Box, or company name)."
          example: 123 Main St.
        line2:
          type: string
          description: "Address line 2 (e.g., apartment, suite, unit, or building)."
          example: Apartment 4
        city:
          type: string
          description: "City, district, suburb, town, or village."
          example: Anytown
        state:
          type: string
          description: "State, county, province, or region."
          example: Anystate
        country:
          type: string
          description: The country of the address.
          example: Wonderland
        postalCode:
          maxLength: 15
          type: string
          description: ZIP or postal code.
          example: "12345"
        createdAt:
          type: string
          description: The timestamp when the user account was created.
          format: date-time
          example: 2023-01-01T00:00:00Z
    Meter:
      required:
        - isConfirmed
        - makoType
        - meterId
        - meterType
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier for a meter, generated by the database."
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        meterId:
          uniqueItems: true
          type: string
          description: A unique meter identification string.
          example: "12345678901234567890"
        isConfirmed:
          type: boolean
          description: Flag set to false until the meter Id was confirmed by the MaKo
          example: false
        meterType:
          type: string
          description: The type of meter.
          enum:
            - SMART
            - DIGITAL
            - ANALOG
        makoType:
          type: string
          description: The market communication type for the meter.
          enum:
            - MELO
            - MALO
        createdAt:
          type: string
          description: The date and time when the meter record was created.
          format: date-time
    Plan:
      required:
        - baseFee
        - id
        - name
        - planCategory
        - status
        - tariffType
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier for the plan, generated by the database."
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: The name of the plan.
          example: Residential Basic
        tariffType:
          type: string
          description: The type of tariff applied to the plan.
          example: FIXED
          enum:
            - DYNAMIC
            - FIXED
        planCategory:
          type: string
          description: The category of the plan.
          example: HOUSEHOLD
          enum:
            - HEATING
            - HOUSEHOLD
            - CHARGING
        status:
          type: string
          description: The status of the plan.
          example: DRAFT
          enum:
            - AVAILABLE
            - ARCHIVED
            - PENDING
            - DRAFT
        baseFee:
          type: number
          description: The base fee for the plan in €.
          format: float
          example: 5.99
        pricePerKwh:
          type: number
          description: "The price per kWh in €, which is nullable if it is a dynamic plan."
          format: float
          nullable: true
          example: 0.15
        createdAt:
          type: string
          description: The timestamp when the plan was created.
          format: date-time
          example: 2023-01-01T12:00:00Z
    Contract:
      required:
        - addressId
        - id
        - meterId
        - planId
        - startDate
        - status
        - userId
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the contract.
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        startDate:
          type: string
          description: The start date and time of the contract.
          format: date-time
          example: 2023-01-01T12:00:00Z
        status:
          type: string
          description: The current status of the contract.
          example: ACTIVE
          enum:
            - PENDING
            - ACTIVE
            - CANCELLED
        user:
          $ref: "#/components/schemas/User"
        plan:
          $ref: "#/components/schemas/Plan"
        deliveryAddress:
          $ref: "#/components/schemas/Address"
        meter:
          $ref: "#/components/schemas/Meter"
        createdAt:
          type: string
          description: The date and time when the contract was created.
          format: date-time
          example: 2023-01-01T12:00:00Z
        activatedAt:
          type: string
          description: The date and time when the contract was activated.
          format: date-time
          nullable: true
        cancelledAt:
          type: string
          description: The date and time when the contract was cancelled.
          format: date-time
          nullable: true
        endedAt:
          type: string
          description: The date and time when the contract ended.
          format: date-time
          nullable: true
    Price:
      required:
        - endDate
        - interval
        - price
        - startDate
      type: object
      properties:
        id:
          type: string
          description: "The unique identifier for a price, generated by the database."
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        startDate:
          type: string
          description: The start date and time for the price interval.
          format: date-time
          example: 2023-01-01T00:00:00Z
        endDate:
          type: string
          description: The end date and time for the price interval.
          format: date-time
          example: 2023-01-02T00:00:00Z
        interval:
          type: string
          description: The interval for which the price is applicable.
          enum:
            - HOURLY
            - QUARTERHOURLY
        price:
          type: number
          description: The price value for the given interval.
          format: float
          example: 100.5
        marketType:
          type: string
          description: The market type for the price.
          enum:
            - DayAheadEPEX
    inline_response_200:
      type: object
      properties:
        interval:
          type: string
          enum:
            - HOURLY
            - QUARTERHOURLY
        marketType:
          type: string
          enum:
            - DayAheadEPEX
        prices:
          type: array
          items:
            $ref: "#/components/schemas/inline_response_200_prices"
    inline_response_200_prices:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        price:
          type: number
          format: float
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
